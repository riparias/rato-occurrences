% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/read_encrypted_csv.R
\name{read_encrypted_csv}
\alias{read_encrypted_csv}
\title{Read an encrypted csv}
\usage{
read_encrypted_csv(file, key = Sys.getenv("encryption_key"), ...)
}
\arguments{
\item{file}{Either a path to a file, a connection, or literal data
(either a single string or a raw vector).

Files ending in \code{.gz}, \code{.bz2}, \code{.xz}, or \code{.zip} will
be automatically uncompressed. Files starting with \verb{http://},
\verb{https://}, \verb{ftp://}, or \verb{ftps://} will be automatically
downloaded. Remote gz files can also be automatically downloaded and
decompressed.

Literal data is most useful for examples and tests. To be recognised as
literal data, the input must be either wrapped with \code{I()}, be a string
containing at least one new line, or be a vector containing at least one
string with a new line.

Using a value of \code{\link[readr:clipboard]{clipboard()}} will read from the system clipboard.}

\item{key}{For symmetric decryption, 'pkey' should be NULL (default) and
'key' can be either a string (Default is 'pass') or a raw object. For
asymmetric decryption, both 'key' (private key of the decrypter) and 'pkey'
(public key of the encrypter) should be raw objects.}

\item{...}{passed on to \code{\link[readr:read_delim]{readr::read_csv()}}}
}
\value{
A \code{\link[=tibble]{tibble()}}. As per \code{\link[readr:read_delim]{readr::read_csv()}}
}
\description{
The decryption key is read from the system environment by default, but can
be provided as a length one character vector.
}
